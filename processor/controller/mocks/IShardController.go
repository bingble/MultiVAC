// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"github.com/multivactech/MultiVAC/configs/config"
	"github.com/multivactech/MultiVAC/p2p/connection"
	"github.com/multivactech/MultiVAC/p2p/peer"

	"github.com/multivactech/MultiVAC/processor/shared/message"

	"github.com/stretchr/testify/mock"

	"github.com/multivactech/MultiVAC/model/shard"

	"github.com/multivactech/MultiVAC/model/wire"
)

// MockedShardController is an autogenerated mock type for the MockedShardController type
type MockedShardController struct {
	mock.Mock
}

// HandleMsg provides a mock function with given fields: p, msg
func (_m *MockedShardController) HandleMsg(p peer.Reply, msg wire.Message) {
	_m.Called(p, msg)
}

// HandleRPCReq provides a mock function with given fields: req
func (_m *MockedShardController) HandleRPCReq(req *message.RPCReq) *message.RPCResp {
	ret := _m.Called(req)

	var r0 *message.RPCResp
	if rf, ok := ret.Get(0).(func(*message.RPCReq) *message.RPCResp); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.RPCResp)
		}
	}

	return r0
}

// IsEnabled provides a mock function with given fields:
func (_m *MockedShardController) IsEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NotifyNewPeerAdded provides a mock function with given fields: cp, t
func (_m *MockedShardController) NotifyNewPeerAdded(cp *connection.ConnPeer, t config.NodeType) {
	_m.Called(cp, t)
}

// NotifyPeerDone provides a mock function with given fields: cp, t
func (_m *MockedShardController) NotifyPeerDone(cp *connection.ConnPeer, t config.NodeType) {
	_m.Called(cp, t)
}

// ShardIndex provides a mock function with given fields:
func (_m *MockedShardController) ShardIndex() shard.Index {
	ret := _m.Called()

	var r0 shard.Index
	if rf, ok := ret.Get(0).(func() shard.Index); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(shard.Index)
	}

	return r0
}
